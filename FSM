----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 29.11.2019 12:08:41
-- Design Name: 
-- Module Name: FSM - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity FSM is
  Port ( clk,reset : in std_logic;
        r_rom,w_ram,r_ram : out std_logic;
        addr : out std_logic_vector(1 downto 0)
  );
end FSM;

architecture Behavioral of FSM is

type state_type is (s0,s1,s2,s3,s4,s5,s6,s7);
signal current_state, next_state : state_type;

begin

    process(clk)begin
        if(rising_edge (clk))then
            if(reset = '1')then
                current_state <= s0;
            else
                current_state <= next_state;
            end if;
        end if;
    end process;
    
    process(current_state)begin
        case current_state is
        
            when s0 =>
                addr <= "00";
                r_rom <= '1';
                w_ram <= '1';
                r_ram <= '0';
            when s1 =>
                addr <= "01";
                r_rom <= '1';
                w_ram <= '1';
                r_ram <= '0';
            when s2 =>
                addr <= "10";
                r_rom <= '1';
                w_ram <= '1';
                r_ram <= '0';
            when s3 =>
                addr <= "11";
                r_rom <= '1';
                w_ram <= '1';
                r_ram <= '0';
            when s4 =>
                addr <= "00";
                r_rom <= '0';
                w_ram <= '0';
                r_ram <= '1';
            when s5 =>
                addr <= "01";
                r_rom <= '0';
                w_ram <= '0';
                r_ram <= '1';
            when s6 =>
                addr <= "10";
                r_rom <= '0';
                w_ram <= '0';
                r_ram <= '1';
            when s7 =>
                addr <= "11";
                r_rom <= '0';
                w_ram <= '0';
                r_ram <= '1';
                
        end case;
    end process;
end Behavioral;
